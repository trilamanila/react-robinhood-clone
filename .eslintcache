[{"/Projects/robinhood/src/index.js":"1","/Projects/robinhood/src/reportWebVitals.js":"2","/Projects/robinhood/src/App.js":"3","/Projects/robinhood/src/Header.js":"4","/Projects/robinhood/src/Newsfeed.js":"5","/Projects/robinhood/src/Stats.js":"6","/Projects/robinhood/src/LineGraph.js":"7","/Projects/robinhood/src/StatsRow.js":"8","/Projects/robinhood/src/firebase.js":"9","/Projects/robinhood/src/TimeLine.js":"10","/Projects/robinhood/src/Chip.js":"11"},{"size":500,"mtime":1606718262000,"results":"12","hashOfConfig":"13"},{"size":362,"mtime":1606718262000,"results":"14","hashOfConfig":"13"},{"size":442,"mtime":1606924662000,"results":"15","hashOfConfig":"13"},{"size":817,"mtime":1606845957000,"results":"16","hashOfConfig":"13"},{"size":2076,"mtime":1611422550000,"results":"17","hashOfConfig":"13"},{"size":3201,"mtime":1611395734000,"results":"18","hashOfConfig":"13"},{"size":2748,"mtime":1611252137000,"results":"19","hashOfConfig":"13"},{"size":1670,"mtime":1611451006000,"results":"20","hashOfConfig":"13"},{"size":450,"mtime":1611395261000,"results":"21","hashOfConfig":"13"},{"size":613,"mtime":1611245988000,"results":"22","hashOfConfig":"13"},{"size":400,"mtime":1611416591000,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"qfi3qd",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"26"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"26"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"26"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"26"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"26"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"26"},"/Projects/robinhood/src/index.js",[],["54","55"],"/Projects/robinhood/src/reportWebVitals.js",[],"/Projects/robinhood/src/App.js",["56"],"import logo from './logo.svg';\nimport './App.css';\nimport Header from './Header'\nimport Newsfeed from './Newsfeed'\nimport Stats from './Stats'\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <div className=\"app_header\">\n        <Header />\n    </div>\n    <div className=\"app_body\">\n      <div className=\"app_container\">\n          <Newsfeed />\n          <Stats />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","/Projects/robinhood/src/Header.js",["57","58","59","60","61","62"],"import React from 'react'\nimport Logo from './robinhood.svg'\nimport './Header.css'\n\nfunction Header() {\n    return (\n        <div className=\"header_wrapper\">\n            <div className=\"header_logo\">\n                <img src={Logo} width={25} /> \n            </div>\n            {/* search */}\n            <div className=\"header_search\">\n                <div className=\"header_searchContainer\">\n                    <input placeholder=\"Search\" type=\"text\" />\n                </div>\n            </div>\n            {/* menuitems */}\n            <div className=\"header_menuItems\">\n            <a href=\"#\">Free Stocks</a>\n            <a href=\"#\">Portfolio</a>\n            <a href=\"#\">Cash</a>\n            <a href=\"#\">Messages</a>\n            <a href=\"#\">Account</a>\n        </div>\n    </div>\n    )\n}\n\nexport default Header\n","/Projects/robinhood/src/Newsfeed.js",["63"],"import React, { useState } from 'react'\nimport './Newsfeed.css'\nimport LineGraph from './LineGraph'\nimport TimeLine from './TimeLine'\nimport Chip from './Chip'\n\n\nfunction Newsfeed() {\n    const [popularTopics, setTopics] = useState([\n    \"Technology\",\n    \"Top Movies\",\n    \"Upcoming Earnings\",\n    \"Crypto\",\n    \"Cannabis\",\n    \"Healthcare Supplies\",\n    \"Index ETFs\",\n    \"Technology\",\n    \"China\",\n    \"Pharma\",\n  ]);\n  \n    return (\n        <div className=\"newsfeed\">\n            <div className=\"newsfeed_container\">\n                <div className=\"newsfeed_chartSection\">\n                    <div className=\"newsfeed_portfolio\">\n                        <h1>$121,177</h1>\n                        <p>+45.24 (+1.21%) Today</p>\n                    </div>\n                    <div className=\"newsfeed_chart\">\n                       <LineGraph />\n                       <TimeLine />\n                    </div>\n                </div>\n                <div className=\"newsfeed_buying_section\">\n                    <h2> Buying Power </h2>\n                    <h2> $4.20 </h2>\n                </div>\n                <div className=\"newsfeed_market_section\">\n                    <div className=\"newsfeed_market_box\">\n                        <p> Markets Closed </p>\n                        <h1> Happy Holidays </h1>\n                    </div>\n                </div>\n                <div className=\"newsfeed_popularlists_section\">\n                    <div className=\"newsfeed_popularlists_intro\">\n                        <h1>Popular lists</h1>\n                        <p>Show More</p>\n                    </div>\n                    <div className=\"newsfeed_popularlists_badges\">\n                        {popularTopics.map((topic) => ( \n                        <Chip \n                                label={topic}\n                                image={`https://avatars.dicebear.com/api/human/${topic}.svg`}\n                            /> \n                        ))}\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default Newsfeed\n","/Projects/robinhood/src/Stats.js",["64","65","66"],"import React, { useState, useEffect } from 'react'\nimport './Stats.css'\nimport axios from 'axios';\nimport StatsRow from './StatsRow';\nimport { db } from './firebase';\n\nconst TOKEN = \"c03g7rv48v6sogn2hrvg\";\nconst BASE_URL = \"https://finnhub.io/api/v1/quote\";\n\nfunction Stats() {\n    const [stocksData, setStocksData] = useState([]);\n    const [myStocks, setMyStocks] = useState([]);\n    const getMyStocks = () => {\n        db\n        .collection('myStocks')\n        .onSnapshot(snapshot => {\n            let promises = [];\n            let tempData = [];\n            snapshot.docs.map((doc) => {\n            promises.push(\n                getStocksData(doc.data().ticker)\n                .then((res) => {\n                tempData.push({\n                    id: doc.id, \n                    data: doc.data(),\n                    info: res.data\n                        })\n                    })\n                )})\n                Promise.all(promises).then(()=>{\n                    setMyStocks(tempData);\n                })\n            })\n        }\n\n    const getStocksData = (stock) => {\n        return axios\n            .get(`${BASE_URL}?symbol=${stock}&token=${TOKEN}`)\n            .catch((error) => {\n                console.error(\"Error\", error.message);\n            });\n    };\n\n    useEffect(()=>{\n        let tempStocksData = []\n        const stocksList = [\"AAPL\", \"MSFT\", \"TSLA\", \"FB\", \"BABA\", \"UBER\", \"DIS\", \"SBUX\"];\n        let promises = [];\n        getMyStocks();\n        stocksList.map((stock) => {\n        promises.push(\n            getStocksData(stock)\n            .then((res) => {\n            tempStocksData.push({\n                name: stock,\n                ...res.data\n                    });\n                })\n            )\n        });\n\n         Promise.all(promises).then(()=>{\n         setStocksData(tempStocksData);\n         })\n     }, []);\n\n    return (\n        <div className=\"stats\">\n            <div className=\"stats_container\">\n                <div className=\"stats_header stats_lists\">\n                    <p>Stocks</p>\n                </div>\n            <div className=\"stats_content\">\n            </div>\n            <div className=\"stats_rows\">\n                    {myStocks.map((stock) => (\n                        <StatsRow \n                        key={stock.data.ticker}\n                        name={stock.data.ticker}\n                        openPrice={stock.info.o}\n                        shares={stock.data.shares}\n                        price={stock.info.c}\n                        />\n                    ))}\n                <div className=\"stats_header stats-list\">\n                    <p>Lists</p>\n                </div>\n            <div className=\"stats_content\">\n                <div className=\"stats_rows\">\n                    {stocksData.map((stock) => (\n                        <StatsRow \n                            key={stock.name}\n                            name={stock.name}\n                            openPrice={stock.o}\n                            price={stock.c}\n                        />\n                    ))}\n                    </div>\n                </div>\n            </div>\n        </div>\n        </div>\n    );\n}\n\nexport default Stats\n","/Projects/robinhood/src/LineGraph.js",["67"],"import React, { useEffect, useState } from 'react'\nimport { Line } from \"react-chartjs-2\";\nimport './LineGraph.css'\n\nfunction LineGraph() {\n    const [ graphData, setGraphData ] = useState([]);\n    const data = \n        [{\n            x: 14,\n            y: 15\n        }, {\n            x: 15,\n            y: 20\n        }\n        ]\n\n        const createMockData = () => {\n            let data = [];\n            let value = 50;\n            for(var i=0; i < 366; i++){\n                let date = new Date();\n                date.setHours(0,0,0,0);\n                date.setDate(i);\n                value += Math.round((Math.random() < 0.5 ? 1 : 0))\n                data.push({x: date, y: value});\n            }\n            setGraphData(data);\n        }\n\n        useEffect(()=>{\n            createMockData();\n        }, [])\n    return (\n        <div className=\"linegraph\">\n            <Line \n                data={{\n                    datasets: [\n                        {\n                            type: \"line\",\n                            data: graphData,\n                            backgroundColor: \"black\",\n                            borderColor: \"#5AC53B\",\n                            borderWidth: 2,\n                            pointBorderColor: 'rgba(0, 0, 0, 0)',\n                            pointBackgroundColor: 'rgba(0, 0, 0, 0)',\n                            pointHoverBackgroundColor: '#5AC53B',\n                            pointHoverBorderColor: '#000000',\n                            pointHoverBorderWidth: 4,\n                            pointHoverRadius: 6,\n                        },\n                    ],\n                }}\n                options={{\n                    maintainAspectRatio: false,\n                    legend: {\n                        display: false\n                    },\n                    tooltips: {\n                        mode: \"index\",\n                        intersect: false\n                    },\n                    scales: {\n                        xAxes: [\n                            {\n                                type: \"time\",\n                                time: {\n                                    format: \"MM/DD/YY\",\n                                    tooltipFormat: \"ll\",\n                                },\n                                ticks: {\n                                    display: false,\n                                }\n                            },\n                        ],\n                        yAxes: [{\n                            ticks: {\n                                display: false\n                            }\n                        }]\n                    }\n                }}\n            />\n            \n        </div>\n    )\n}\n\nexport default LineGraph\n","/Projects/robinhood/src/StatsRow.js",["68"],"/Projects/robinhood/src/firebase.js",[],["69","70"],"/Projects/robinhood/src/TimeLine.js",[],"/Projects/robinhood/src/Chip.js",["71"],"import React from 'react'\nimport './Chip.css'\n\nfunction Chip(props) {\n    return (\n        <div className=\"chip\">\n            <div className=\"chip_avatar\">\n                <img src={props.image} width={10} height={10} />\n            </div>\n            <div className=\"chip_label\">\n                <span>{props.label}</span>\n            </div>\n            \n        </div>\n    )\n}\n\nexport default Chip\n",{"ruleId":"72","replacedBy":"73"},{"ruleId":"74","replacedBy":"75"},{"ruleId":"76","severity":1,"message":"77","line":1,"column":8,"nodeType":"78","messageId":"79","endLine":1,"endColumn":12},{"ruleId":"80","severity":1,"message":"81","line":9,"column":17,"nodeType":"82","endLine":9,"endColumn":46},{"ruleId":"83","severity":1,"message":"84","line":19,"column":13,"nodeType":"82","endLine":19,"endColumn":25},{"ruleId":"83","severity":1,"message":"84","line":20,"column":13,"nodeType":"82","endLine":20,"endColumn":25},{"ruleId":"83","severity":1,"message":"84","line":21,"column":13,"nodeType":"82","endLine":21,"endColumn":25},{"ruleId":"83","severity":1,"message":"84","line":22,"column":13,"nodeType":"82","endLine":22,"endColumn":25},{"ruleId":"83","severity":1,"message":"84","line":23,"column":13,"nodeType":"82","endLine":23,"endColumn":25},{"ruleId":"76","severity":1,"message":"85","line":9,"column":27,"nodeType":"78","messageId":"79","endLine":9,"endColumn":36},{"ruleId":"86","severity":1,"message":"87","line":19,"column":37,"nodeType":"88","messageId":"89","endLine":19,"endColumn":39},{"ruleId":"86","severity":1,"message":"87","line":49,"column":32,"nodeType":"88","messageId":"89","endLine":49,"endColumn":34},{"ruleId":"90","severity":1,"message":"91","line":64,"column":9,"nodeType":"92","endLine":64,"endColumn":11,"suggestions":"93"},{"ruleId":"76","severity":1,"message":"94","line":7,"column":11,"nodeType":"78","messageId":"79","endLine":7,"endColumn":15},{"ruleId":"80","severity":1,"message":"81","line":46,"column":14,"nodeType":"82","endLine":46,"endColumn":47},{"ruleId":"72","replacedBy":"95"},{"ruleId":"74","replacedBy":"96"},{"ruleId":"80","severity":1,"message":"81","line":8,"column":17,"nodeType":"82","endLine":8,"endColumn":65},"no-native-reassign",["97"],"no-negated-in-lhs",["98"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'setTopics' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getMyStocks'. Either include it or remove the dependency array.","ArrayExpression",["99"],"'data' is assigned a value but never used.",["97"],["98"],"no-global-assign","no-unsafe-negation",{"desc":"100","fix":"101"},"Update the dependencies array to be: [getMyStocks]",{"range":"102","text":"103"},[1858,1860],"[getMyStocks]"]